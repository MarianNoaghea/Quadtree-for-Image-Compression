Noaghea Marian-Florentin 333CC

Structura aleasa pentru reprezentarea unui nod din arborele de compresie a fost
gandita in felul urmator, va contine:
    -o culoare (structura ce contine 3 culori) medie
    -4 pointeri spre nodurile copii 
    -un size care reprezinta ce dimensiune are patratul
    -4 indecsi care spun care este rangeul in care se vor mapa pixelii in imagine
    -2 int pointeri spre care toate nodurile vor pointa, in acestia voi stii mereu
     cate frunze si cate noduri sunt in arbore

Cerinta 1 - Compress

*buildTree:
Voi calcula culoarea medie si voi apela functia "split_in4" in 
care se vor creea copii pentru  acel nod si daca meanul acelor copii va fi > prag 
functia "split_in4" se va apela recursiv mai departe, creeind mai departe alte noduri copil.

*populate_vec:
Creez un vector de structuri QuadtreeNode.
Dupa care ma folosesc de o coada pentru a parcurge BFS arborele si pentru a popula vectorul.

*scriere in fisier:
Dupa care parcurg vectorul creeat si scriu in fisierul de output la fel ca si in exemplul
dat.

Cerinta 2 - Decompress

*populate_vec din fisier:
Citesc din fisier si populez vectorul de QuadtreeNode

*createTree:
Asemanator cu buildTree voi creea noduri dar de data aceasta pe baza vectorului

*decompress_image
    *populate_img
    Parcurg recursiv arborele si pentru fiecare nod voi popula matricea de pixeli img
    *scrierea in fisier
    Informatiile obtinute in urma parcurgerii si salvate in img le voi scrie in fisierul ppm.

Cerinta 3 - Mirror

*buildTree
La fel ca la Compress

*mirror
voi parcurge intreg arborele si voi face swapp de informatii legate de maparea subarborilor
pentru a obtine efectul dorit 'v' sau 'h'

*decompress_image
Parcurg arborele modificat, repopulez matricea img, apoi obtin noul fisier ppm.

Feedback:
O tema foarte interesanta, de dificulate medie, necesita foarte multa atentie.
Timp de lucru: 3-4 zile adunate, cam 6 ore pe zi.
